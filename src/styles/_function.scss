@use "sass:math";
@import "./variables.scss";

// Breakpoint
@mixin mobile {
  @media (max-width: #{$breakpoint-mobile}) {
    @content;
  }
}

@mixin tablet {
  @media (max-width: #{$breakpoint-tablet}) {
    @content;
  }
}

@mixin onlyTablet {
  @media (max-width: #{$breakpoint-tablet}) and (min-width: #{$breakpoint-mobile + 1}) {
    @content;
  }
}

@mixin desktopUp {
  @media (min-width: #{$breakpoint-tablet + 1}) {
    @content;
  }
}

@function mobile-vw($pixels, $base-vw: $mobile-width) {
  @return math.div($pixels * 100vw, $base-vw);
}

@function mobile-vh($pixels, $base-vh: $mobile-height) {
  @return math.div($pixels * 100vh, $base-vh);
}

@function desktop-vw($pixels, $base-vw: $desktop-width) {
  @return math.div($pixels * 100vw, $base-vw);
}

@function desktop-vh($pixels, $base-vh: $desktop-height) {
  @return math.div($pixels * 100vh, $base-vh);
}

@function tablet-vw($pixels, $base-vw: $tablet-width) {
  @return math.div($pixels * 100vw, $base-vw);
}

@function tablet-vh($pixels, $base-vh: $tablet-height) {
  @return math.div($pixels * 100vh, $base-vh);
}

@function columns($columns) {
  @return calc(
    (#{$columns} * var(--layout-column-width)) +
      ((#{$columns} - 1) * var(--layout-columns-gap))
  );
}

@mixin aspect-ratio($width, $height) {
  position: relative;
  &:before {
    display: block;
    content: "";
    width: 100%;
    padding-top: math.div($height, $width) * 100%;
  }
  > * {
    position: absolute !important;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
  }
}

@mixin line-clamp(
  $line-clamp: 4,
  $line-height: 1.5,
  $text-background-color: #fff
) {
  display: block;
  display: -webkit-box;
  -webkit-box-orient: vertical;
  position: relative;

  line-height: $line-height;
  overflow: hidden;
  text-overflow: ellipsis;
  padding: 0 !important;

  -webkit-line-clamp: $line-clamp;
  height: (1em * $line-height * $line-clamp);
  &:after {
    content: "...";
    text-align: right;
    bottom: 0;
    right: 0;
    width: 25%;
    display: block;
    position: absolute;
    height: 1em * $line-height;
    background: linear-gradient(
      to right,
      rgba($text-background-color, 0),
      rgba($text-background-color, 1) 75%
    );
  }
  @supports (-webkit-line-clamp: 1) {
    &:after {
      display: none !important;
    }
  }
}

@function rem($px, $base: 10px) {
  @return math.div($px, $base) * 1rem;
}

@mixin hover {
  @media (hover: hover) and (pointer: fine) {
    &:hover {
      @content;
    }
  }
}
